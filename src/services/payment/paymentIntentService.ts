import { createLoggerWithFunction } from '../../logger';
import { StripePaymentProvider, StripeCurrency, convertToCents } from '../../providers/stripe';
import { extractUserAndSlugFromLink, findUserByUniqueName, findProductByUserAndSlug, validateProductStatus } from './helpers/paymentLinkHelpers';
import { PaymentRepository } from '../../repositories/database/payment/paymentRepository';
import { PaymentIntent, PaymentIntentStatus } from '../../repositories/database/payment/payment.interface';

/**
 * Payment Intent Service
 * 
 * Handles payment intent creation from payment links
 */
export class PaymentIntentService {
  private static logger = createLoggerWithFunction('PaymentIntentService', { module: 'service' });

  /**
   * Create a payment intent from a payment link
   * 
   * @param paymentLink - The payment link (e.g., https://pay.stablestack.com/johndoe/premium-subscription)
   * @returns Promise<{ clientSecret: string; productId: string; amount: number; currency: string }>
   */
  static async createPaymentIntentFromLink(paymentLink: string): Promise<{
    clientSecret: string;
    productId: string;
    amount: number;
    currency: string;
  }> {
    this.logger.info('createPaymentIntentFromLink', { paymentLink }, 'Creating payment intent from link');

    try {
      // Extract user unique name and slug from payment link
      const { userUniqueName, slug } = extractUserAndSlugFromLink(paymentLink);

      // Find user by unique name to get user ID
      const user = await findUserByUniqueName(userUniqueName);
      if (!user) {
        throw new Error('Invalid payment link');
      }

      // Find product by user ID and slug
      const product = await findProductByUserAndSlug(user.id, slug);
      if (!product) {
        throw new Error('Invalid payment link');
      }

      // Validate product is active and not expired
      validateProductStatus(product);

      // Convert amount to cents for Stripe
      const amountInCents = convertToCents(parseFloat(product.amount));
      const currency = product.payoutToken.toUpperCase() as StripeCurrency;

      // Create Stripe payment intent
      const { clientSecret, paymentIntentId } = await StripePaymentProvider.createPaymentIntent(
        amountInCents,
        currency,
        product.productName,
        product.id,
        (product as any).userId // Cast to access userId from database
      );

      // Create payment intent object for database (id will be auto-generated by database)
      const paymentIntent: Omit<PaymentIntent, 'id'> = {
        userId: (product as any).userId,
        productId: product.id,
        slug: slug,
        userUniqueName: userUniqueName,
        paymentIntentId: paymentIntentId, // Our payment intent ID (generated in Stripe provider)
        clientSecret: clientSecret,
        amount: amountInCents,
        currency: currency,
        status: PaymentIntentStatus.INITIATED,
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString()
      };

      // Save payment intent to database
      await PaymentRepository.savePaymentIntent(paymentIntent);

      this.logger.info('createPaymentIntentFromLink', {
        paymentIntentId: paymentIntentId,
        productId: product.id,
        userUniqueName,
        slug,
        amount: amountInCents,
        currency
      }, 'Payment intent created and saved successfully');

      return {
        clientSecret,
        productId: product.id,
        amount: amountInCents,
        currency
      };
    } catch (error: any) {
      this.logger.error('createPaymentIntentFromLink', { paymentLink, error: error.message }, 'Failed to create payment intent from link');
      throw error;
    }
  }

}
